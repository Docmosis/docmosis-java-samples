# Example property file for Docmosis.

#######################
# General Information #
#######################
# By default, Docmosis will look for this file (docmosis.properties) in the root of your classpath entries.
# Properties can alternatively be specified in Java System.properties and any properties put into
# System.properties will override values in this file.
# 
# Some properties are relevant to the Docmosis CORE (that is the main engine) while others are relevant
# to the Docmosis CONVERTERS.  Each property below has comments indicating to which part of Docmosis it applies.
# In the case where you have multiple converters distributed around different computers, you will probably
# have multiple copies of this property file.  You can choose to cut those property files down to the bare 
# minimum for the converters or core as required.  For example, only the Docmosis core cares about the license 
# key, so only it's properties file needs to specify it.


#######################
# Must-set properties #
#######################
# Specify the license key 
# (relevant only to the Docmosis Core)
#docmosis.key=XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-X-XXXX
#docmosis.site=XXXXXXXXXXXXXXXX

# Specify where to find the OpenOffice or LibreOffice install 
# (relevant only to the Docmosis Converters)
#docmosis.openoffice.location=XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Windows examples
# ----------------
#docmosis.openoffice.location=C:/Program Files/LibreOffice 5
#docmosis.openoffice.location=C:/Program Files (x86)/OpenOffice 4

# Linux/Unix examples
# -------------------
#docmosis.openoffice.location=/opt/libreoffice5.0
#docmosis.openoffice.location=/opt/OpenOffice4

# MacOS examples
# --------------
#docmosis.openoffice.location=/Applications/OpenOffice.org.app/Contents



##############################
# Optional common properties #
##############################

# The location where the template store is to reside.  The template store should be thought of 
# as a cache.  Templates that are placed into the store undergo validation and optimisation
# in preparation for fast document production.  It can be rebuilt any time so long as you 
# have your original templates still so they can be registered again.  See the documentation 
# for the StoreHelper and the DropStoreHelper.
# This may be blank and if so, ./templatestore will be used.
# (relevant only to the Docmosis Core)
#docmosis.template.store.location=./templatestore

# A ; delimited list of source paths for templates.  Set this to have Docmosis automatically
# monitor these locations for new and updated templates.  New and updated templates will be
# loaded (registered) into the template store. 
#docmosis.template.monitor.sourcepath=

# Number of seconds between checking the various template sources for changes.  The default value
# is 5 seconds.  -1 means no watching directories and 0 (zero) means just load once on startup.
# (relevant only to the Docmosis Core)
#docmosis.template.monitor.period=5

# This is the name of the resource to locate in the classpath which defines the
# pool configuration for the Docmosis converters.
# (relevant only to the Docmosis Core)
#docmosis.document.converter.pool.config.resource=converterPoolConfig.xml

# Control how to process a template error during population
# If false, errors in the template processing will be rendered to the resulting
# document.  If true, template errors will be fatal and document production will abort 
# with an Exception being raised.
# true is recommended for production and late testing, false for development and early testing
# (relevant only to the Docmosis Core)
#docmosis.populator.error.fatal=false

# Control how to process a template error during analysis (when registering a template into the store).
# If false, errors in the template processing will be rendered to the resulting
# document.  If true, template errors will be fatal and analysis will fail with an error (causing the
# registration with the template store to fail).
# true is recommended for production and late testing, false for development and early testing
# (relevant only to the Docmosis Core)
#docmosis.analyzer.error.fatal=false

# you can specify the delimiters that Docmosis should use to find your fields in your templates.
# Make sure you choose delimiters that won't appear in your text.  You will need to clear your
# template store for changes to these settings to take effect.
# Default prefix=<< and suffix=>>.  For example, you could use: [[field]]
# (relevant only to the Docmosis Core)
#docmosis.analyzer.field.plainText.prefix=<<
#docmosis.analyzer.field.plainText.suffix=>>

# Try these settings if you are having trouble using embedded converters with JBoss.
# useCustomLoader overrides loadIntoSystemCL so you must set useCustomLoader=false (or comment it out)
# if you want to try loadIntoSystemCL
#(Relevant only to Docmosis Core)
#docmosis.openoffice.useCustomLoader=true
#docmosis.openoffice.libraries.loadIntoSystemCL=true

# DOCX format is controlled by these properties.

# DOCX format is only supported by Libre Office at this time (Open Office 4 still only supports
# MS 2003 xml format)
# If you are using LibreOffice, then you can enable DocX support by un-commenting the following line
# (relevant to the Converters only)
#docmosis.converter.format.docx.internal.enabled=true
  
# A good general DOCX option is to use the OpenSource odf-converter (also packaged with odf-converter-integrator).
# This will work for Open Office and Libre Office and might produce better DOCX results than either. 
#(Relevant only to Docmosis Converters)
#docmosis.converter.format.docx.external.enabled=true
# locate external converter executable
#(Relevant only to Docmosis Converters)
#docmosis.converter.format.docx.external.path=c:/program files)/odf-converter-integrator/OdfConverter.exe
#docmosis.converter.format.docx.external.path=c:/program files (x86)/odf-converter-integrator/OdfConverter.exe
#docmosis.converter.format.docx.external.path=/usr/bin/OdfConverter

# This allows "html-like" markup in your data to be interpreted and acted on.  This defaults to true normally
# to ensure data can be treated as plain text, but you may want to turn it off.
# (relevant only to Docmosis core)
#docmosis.populator.field.markup.process=false